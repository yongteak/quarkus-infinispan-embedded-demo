package io;

import io.quarkus.runtime.annotations.QuarkusMain;

import java.io.InputStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.quarkus.runtime.Quarkus;
import io.quarkus.runtime.QuarkusApplication;

@QuarkusMain
public class Main {

    static final Logger LOG = LoggerFactory.getLogger(Main.class);

    public static void main(String... args) {
        // setEnv(); // 환경 변수 설정을 호출
        System.out.println("Running main method");
        Quarkus.run(args);
    }

    public static class MyApp implements QuarkusApplication {

        @Override
        public int run(String... args) throws Exception {
            System.out.println("Do startup logic here");
            // Quarkus.waitForExit();
            // return 0;
            // String oraclizerHttpPort = System.getenv("ORACLIZER_HTTP_PORT");
            // String oraclizerApiPort = System.getenv("ORACLIZER_API_PORT");
            String infinispanStorePersistencePath = System.getenv("INFINISPAN_STORE_PERSISTENCE_PATH");
            String infinispanStorePersistentPath = System.getenv("INFINISPAN_STORE_PERSISTENT_PATH");
            String infinispanStoreTemporaryPath = System.getenv("INFINISPAN_STORE_TEMPORARY_PATH");
            String infinispanBindPort = System.getenv("INFINISPAN_BIND_PORT");
            String infinispanInitialHosts = System.getenv("INFINISPAN_INITIAL_HOSTS");

            // System.out.println("ORACLIZER_HTTP_PORT: " + oraclizerHttpPort);
            // System.out.println("ORACLIZER_API_PORT: " + oraclizerApiPort);
            // System.out.println("INFINISPAN_CLUSTER_NAME: " + infinispanClusterName);
            // System.out.println("INFINISPAN_NODE_NAME: " + infinispanNodeName);
            System.out.println("INFINISPAN_STORE_PERSISTENCE_PATH: " + infinispanStorePersistencePath);
            System.out.println("INFINISPAN_STORE_PERSISTENT_PATH: " + infinispanStorePersistentPath);
            System.out.println("INFINISPAN_STORE_TEMPORARY_PATH: " + infinispanStoreTemporaryPath);
            System.out.println("INFINISPAN_BIND_PORT: " + infinispanBindPort);
            System.out.println("INFINISPAN_INITIAL_HOSTS: " + infinispanInitialHosts);

            if (infinispanBindPort != null) {
                System.setProperty("infinispan.bind.port", System.getenv("INFINISPAN_BIND_PORT"));
            }

            if (infinispanInitialHosts == null) {
                System.setProperty("infinispan.initial.hosts", "localhost[7800]");
                System.out.println(">>> infinispan.initial.hosts: " + "localhost[7800]");
            } else {
                System.setProperty("infinispan.initial.hosts", infinispanInitialHosts);
                System.out.println(">>>? infinispan.initial.hosts: exist!! > " + infinispanInitialHosts);
            }

            System.setProperty("infinispan.cluster.name", System.getenv("INFINISPAN_CLUSTER_NAME"));
            System.setProperty("infinispan.node.name", System.getenv("INFINISPAN_NODE_NAME"));
            System.setProperty("infinispan.store.persistence.path", System.getenv("INFINISPAN_STORE_PERSISTENCE_PATH"));
            System.setProperty("infinispan.store.persistent.path", System.getenv("INFINISPAN_STORE_PERSISTENT_PATH"));
            System.setProperty("infinispan.store.temporary.path", System.getenv("INFINISPAN_STORE_TEMPORARY_PATH"));
            
            // String home = System.getProperty("user.home");
            // LOG.info("### user.home ==>>> ",home);

            InputStream is = Thread.currentThread().getContextClassLoader()
                    .getResourceAsStream("infinispan-tcp-unencrypted.xml");
            if (is == null) {
                throw new RuntimeException("File not found [ infinispan-tcp-unencrypted.xml ]");
            } else {
                LOG.info("INCLUDED!! infinispan-tcp-unencrypted.xml");
            }
            Quarkus.waitForExit(); // 애플리케이션을 계속 실행 상태로 유지
            return 0;
        }
    }
}